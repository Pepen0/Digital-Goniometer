@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": false,
    "cutInterfaceStructures": false,
    "cutDataStructures": false,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 6,
    "backwardDepth": 6,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "com.example.goniometer.HeadRotation",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/

digraph g {
    rankdir="TB"
    splines=polyline

    'nodes 
    subgraph cluster_1322970774 { 
        label=Arduino
        labeljust=l
        fillcolor="#ececec"
        style=filled

        class ArduinoSetup {
            - LED_RED: int
            - LED_GREEN: int
            - LED_BLUE: int
            - startTime: unsigned long
            + setup()
            + loop()
        }

        class IMUHandler {
            - RateYaw: float
            - RateRoll: float
            - RatePitch: float
            - AccX: float
            - AccY: float
            - AccZ: float
            - Roll: float
            - Pitch: float
            - Yaw: float
            - AngleRoll: float
            - AnglePitch: float
            - AngleYaw: float
            + readIMU()
            + startCalibrateImu()
            + continueCalibrateImu()
            + finishCalibrateImu()
            + resetMeasuring()
        }

        class BLEHandler {
            - imuService: BLEService
            - dataCharacteristic: BLEStringCharacteristic
            + checkBleInput(BLEDevice central)
            + sendBleOutput()
            + printImuMeasurement()
        }

        class CalibrationManager {
            - sampleCounter: int
            - numSamples: int
            - sumX: float
            - sumY: float
            - sumZ: float
            + startCalibrateImu()
            + continueCalibrateImu()
            + finishCalibrateImu()
        }

        class DebugManager {
            - bleAddress: String
            - bleCommand: String
            - bleDebugMessage: String
            - bleStatus: String
            + printImuMeasurement()
        }
    } 

    'edges    
    ArduinoSetup "1" *-- "1" IMUHandler
    ArduinoSetup "1" *-- "1" BLEHandler
    IMUHandler "1" *-- "1" CalibrationManager
    BLEHandler "1" *-- "1" DebugManager

}
@enduml
